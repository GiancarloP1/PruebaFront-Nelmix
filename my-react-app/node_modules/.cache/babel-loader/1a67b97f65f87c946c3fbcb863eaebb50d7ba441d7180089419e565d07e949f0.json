{"ast":null,"code":"import { jsx as jsx$1, ThemeContext } from '@emotion/react';\nimport * as React from 'react';\nimport deepmerge from 'deepmerge';\nimport packageInfo from '@emotion/react/package.json';\nimport { p as parseProps } from './parseProps-780b287c.browser.esm.js';\nimport '@theme-ui/css';\nconst __EMOTION_VERSION__ = packageInfo.version;\nconst jsx = (type, props, ...children) => jsx$1(type, parseProps(props), ...children);\n\n/**\n * @internal for Babel JSX pragma\n * @see https://github.com/system-ui/theme-ui/issues/1603\n */\nconst createElement = jsx;\n/**\n * @internal\n */\nconst __themeUiDefaultContextValue = {\n  __EMOTION_VERSION__,\n  theme: {}\n};\n\n/**\n * @internal\n */\nconst __ThemeUIContext = /*#__PURE__*/React.createContext(__themeUiDefaultContextValue);\nconst useThemeUI = () => React.useContext(__ThemeUIContext);\nconst canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nconst REACT_ELEMENT = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\nconst FORWARD_REF = canUseSymbol ? Symbol.for('react.forward_ref') : 0xeac7;\nconst deepmergeOptions = {\n  isMergeableObject: n => {\n    return !!n && typeof n === 'object' && n.$$typeof !== REACT_ELEMENT && n.$$typeof !== FORWARD_REF;\n  },\n  arrayMerge: (_leftArray, rightArray) => rightArray\n};\n\n/**\n * Deeply merge themes\n */\nconst merge = (a, b) => deepmerge(a, b, deepmergeOptions);\nfunction mergeAll(...args) {\n  return deepmerge.all(args, deepmergeOptions);\n}\nmerge.all = mergeAll;\n/**\n * @internal\n */\nconst __ThemeUIInternalBaseThemeProvider = ({\n  context,\n  children\n}) => jsx(ThemeContext.Provider, {\n  value: context.theme\n}, jsx(__ThemeUIContext.Provider, {\n  value: context,\n  children\n}));\nfunction ThemeProvider({\n  theme,\n  children\n}) {\n  const outer = useThemeUI();\n  if (process.env.NODE_ENV !== 'production') {\n    if (outer.__EMOTION_VERSION__ !== __EMOTION_VERSION__) {\n      console.warn('Multiple versions of Emotion detected,', 'and theming might not work as expected.', 'Please ensure there is only one copy of @emotion/react installed in your application.');\n    }\n  }\n  const context = typeof theme === 'function' ? {\n    ...outer,\n    theme: theme(outer.theme)\n  } : merge.all({}, outer, {\n    theme\n  });\n  return jsx(__ThemeUIInternalBaseThemeProvider, {\n    context,\n    children\n  });\n}\nexport { ThemeProvider, __ThemeUIContext, __ThemeUIInternalBaseThemeProvider, __themeUiDefaultContextValue, createElement, jsx, merge, useThemeUI };","map":{"version":3,"names":["jsx","jsx$1","ThemeContext","React","deepmerge","packageInfo","p","parseProps","__EMOTION_VERSION__","version","type","props","children","createElement","__themeUiDefaultContextValue","theme","__ThemeUIContext","createContext","useThemeUI","useContext","canUseSymbol","Symbol","for","REACT_ELEMENT","FORWARD_REF","deepmergeOptions","isMergeableObject","n","$$typeof","arrayMerge","_leftArray","rightArray","merge","a","b","mergeAll","args","all","__ThemeUIInternalBaseThemeProvider","context","Provider","value","ThemeProvider","outer","process","env","NODE_ENV","console","warn"],"sources":["D:/CURSOS/PRACTICAS API 2/my-react-app/node_modules/@theme-ui/core/dist/theme-ui-core.browser.esm.js"],"sourcesContent":["import { jsx as jsx$1, ThemeContext } from '@emotion/react';\nimport * as React from 'react';\nimport deepmerge from 'deepmerge';\nimport packageInfo from '@emotion/react/package.json';\nimport { p as parseProps } from './parseProps-780b287c.browser.esm.js';\nimport '@theme-ui/css';\n\nconst __EMOTION_VERSION__ = packageInfo.version;\nconst jsx = (type, props, ...children) => jsx$1(type, parseProps(props), ...children);\n\n/**\n * @internal for Babel JSX pragma\n * @see https://github.com/system-ui/theme-ui/issues/1603\n */\nconst createElement = jsx;\n/**\n * @internal\n */\nconst __themeUiDefaultContextValue = {\n  __EMOTION_VERSION__,\n  theme: {}\n};\n\n/**\n * @internal\n */\nconst __ThemeUIContext = /*#__PURE__*/React.createContext(__themeUiDefaultContextValue);\nconst useThemeUI = () => React.useContext(__ThemeUIContext);\nconst canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nconst REACT_ELEMENT = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\nconst FORWARD_REF = canUseSymbol ? Symbol.for('react.forward_ref') : 0xeac7;\nconst deepmergeOptions = {\n  isMergeableObject: n => {\n    return !!n && typeof n === 'object' && n.$$typeof !== REACT_ELEMENT && n.$$typeof !== FORWARD_REF;\n  },\n  arrayMerge: (_leftArray, rightArray) => rightArray\n};\n\n/**\n * Deeply merge themes\n */\nconst merge = (a, b) => deepmerge(a, b, deepmergeOptions);\nfunction mergeAll(...args) {\n  return deepmerge.all(args, deepmergeOptions);\n}\nmerge.all = mergeAll;\n/**\n * @internal\n */\nconst __ThemeUIInternalBaseThemeProvider = ({\n  context,\n  children\n}) => jsx(ThemeContext.Provider, {\n  value: context.theme\n}, jsx(__ThemeUIContext.Provider, {\n  value: context,\n  children\n}));\nfunction ThemeProvider({\n  theme,\n  children\n}) {\n  const outer = useThemeUI();\n  if (process.env.NODE_ENV !== 'production') {\n    if (outer.__EMOTION_VERSION__ !== __EMOTION_VERSION__) {\n      console.warn('Multiple versions of Emotion detected,', 'and theming might not work as expected.', 'Please ensure there is only one copy of @emotion/react installed in your application.');\n    }\n  }\n  const context = typeof theme === 'function' ? {\n    ...outer,\n    theme: theme(outer.theme)\n  } : merge.all({}, outer, {\n    theme\n  });\n  return jsx(__ThemeUIInternalBaseThemeProvider, {\n    context,\n    children\n  });\n}\n\nexport { ThemeProvider, __ThemeUIContext, __ThemeUIInternalBaseThemeProvider, __themeUiDefaultContextValue, createElement, jsx, merge, useThemeUI };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}